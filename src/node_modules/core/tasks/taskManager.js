'use strict';

const uuidV4 = require('uuid/v4');
const Task = require("./task");

class TaskManager {
  constructor() {
    this.tasks = new Map();
  }

  executeTask({ taskId, params, executer, onExecuted }) {
    const newTaskId = taskId || uuidV4();

    const onSuccessHandler = ({ params, result }) => {
      this.removeTask(newTaskId);

      onExecuted && onExecuted({ params, result });
    }

    const existingTask = this.getTask(newTaskId);

    if (existingTask) {
      existingTask.cancel();
    }

    const newTask = new Task({ 
      taskId: newTaskId,
      params,
      onSuccess: onSuccessHandler,
      executer,
    });
    this.tasks.set(newTaskId, newTask);

    newTask.execute();

    return newTask;
  }

  getTask(taskId) {
    return this.tasks.get(taskId);
  }

  removeTask(taskId) {
    this.tasks.delete(taskId)
  }
};

let _taskManager = null;

const getInstance = () => {
  if (!_taskManager) {
    _taskManager = new TaskManager();
  }

  return _taskManager;
}

const executeTask = ({ taskId, params, executer, onExecuted }) => {
  const taskManager = getInstance();

  taskManager.executeTask({ taskId, params, executer, onExecuted });
}

module.exports = {
  getInstance,
  executeTask
}