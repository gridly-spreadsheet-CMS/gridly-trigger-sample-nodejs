'use strict';

const { fork } = require('child_process');

class Task {
  constructor({ taskId, params, executer, onSuccess }) {
    this.id = taskId || 'unknow';
    this.params = params;
    this.executer = executer;
    this.onSuccess = onSuccess;
    this.status = null;
    this.taskProcessor = null;
  }

  execute() {
    let filePath = __dirname + '/_child_process.js';
    
    if (filePath === '//_child_process.js') {
      filePath = './_child_process.js'
    }

    this.taskProcessor = fork(filePath);

    this.taskProcessor.on('message', (message) => { // done callback
      this.onSuccess({ params: this.params, result: message });
    });

    this.taskProcessor.on('close', function(msg) {

      console.log('!!!!!!!!!!!!!! KILLED !!!!!!!!!!');
      this.kill();
    });

    this.taskProcessor.send({ // call executer
      params: this.params, 
      executer: this.executer 
    });
  }

  cancel() {
    if (this.taskProcessor) {
      this.taskProcessor.kill();
    }
  }
}

module.exports = Task;
