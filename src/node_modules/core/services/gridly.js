const axios = require('axios');
const FormData = require('form-data');
const fs = require('fs');

class GridlyClient {
    constructor({ apiKey, endpoint = 'https://api.gridly.com/v1' }) {
        this._apiKey = apiKey;
        this._baseUrl = endpoint;
        this._headers = {
            Accept: 'application/json;',
            'Content-Type': 'application/json;',
            Authorization: `ApiKey ${apiKey}`
        };
    }

    async _get(url) { // Get all pages
        try {
            let records = [];
            const MAX_LIMIT = 1000;
            let totalRecord = 0;
            let indexRecord = 0;

            do {
                const params = {
                    offset: indexRecord,
                    limit: MAX_LIMIT
                };

                const response = await axios.get(url + `?page=${encodeURI(JSON.stringify(params))}`, {
                    headers: this._headers
                });

                totalRecord = response.headers['x-total-count'] ? parseInt(response.headers['x-total-count']) : 0;

                const newRecords = response.data ? response.data : [];
                
                const builtRecords = newRecords.map(record => {
                    const obj = {};

                    record.cells.forEach(cell => {
                        obj[cell.columnId] = cell.value;
                    });

                    return obj;
                });
                records = records.concat(builtRecords);

                indexRecord = indexRecord + MAX_LIMIT;
            } while (indexRecord < totalRecord);

            return records;
        } catch (error) {
            console.log(`FAILED: [GridlyClient] Fetch ${error}`);
        }
    }

    async _update(url, data) {
        try {
            const response = await axios.patch(
                url,
                JSON.stringify(data),
                {
                    headers: this._headers
                }
            );

            return response;
        } catch (error) {
            console.log(`FAILED: [GridlyClient] Post ${error}`);
        }
    }

    async _upload(url, data) {
        try {
            const response = await axios.post(
                url,
                data,
                {
                    headers: { 
                        ...this._headers,
                        ...data.getHeaders()
                    },
                }
            );

            return response;
        } catch (error) {
            console.log(`FAILED: [GridlyClient] Upload ${error}`);
        }
    }

    records(viewId) {
        return {
            get: async () => await this._get(`${this._baseUrl}/views/${viewId}/records`),
            update: async (data) => await this._update(`${this._baseUrl}/views/${viewId}/records`, data),

            upload: async (filePath, recordId, columnId) => {
                const data = new FormData();
                data.append('file', fs.createReadStream(filePath));
                return await this._upload(`${this._baseUrl}/views/${viewId}/files?recordId=${recordId}&columnId=${columnId}`, data);
            }
        }
    };
}

module.exports = (config = {}) => {
    return new GridlyClient({
        apiKey: config.apiKey
    });
};